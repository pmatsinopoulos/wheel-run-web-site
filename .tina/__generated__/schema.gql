# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String): PostConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String): GlobalConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String): AuthorConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String): PageConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Post | Global | Author | Page

union PostAuthor = Author

type PostMetaOgNamespace {
  value: String
  uri: String
}

type PostMetaOgCustomMeta {
  property: String
  content: String
}

type PostMetaOg {
  type: String
  image: String
  namespace: PostMetaOgNamespace
  customMeta: [PostMetaOgCustomMeta]
}

type PostMeta {
  description: String
  og: PostMetaOg
}

type Post implements Node & Document {
  title: String!
  heroImg: String
  excerpt: JSON
  author: PostAuthor
  date: String
  section: String
  tags: [String]
  _body: JSON
  meta: PostMeta
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type GlobalHeadMeta {
  description: String
}

type GlobalHead {
  title: String
  meta: GlobalHeadMeta
}

type GlobalHeaderIcon {
  color: String
  style: String
  name: String
}

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  icon: GlobalHeaderIcon
  brand: String
  color: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterSocial {
  facebook: String
  twitter: String
  linkedin: String
  github: String
}

type GlobalFooter {
  color: String
  social: GlobalFooterSocial
  viewRawDataButton: Boolean
}

type GlobalTheme {
  color: String
  font: String
  icon: String
  darkMode: String
}

type Global implements Node & Document {
  head: GlobalHead
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Author implements Node & Document {
  name: String
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type PageBlocksImageTextSectionImage {
  src: String
  alt: String
}

type PageBlocksImageTextSection {
  sectionLabel: String
  id: String
  headline: String
  text: JSON
  image: PageBlocksImageTextSectionImage
  color: String
}

type PageBlocksHeroActions {
  label: String
  type: String
  icon: Boolean
  link: String
}

type PageBlocksHeroImage {
  src: String
  alt: String
}

type PageBlocksHero {
  sectionLabel: String
  id: String
  tagline: String
  headline: String
  text: JSON
  actions: [PageBlocksHeroActions]
  image: PageBlocksHeroImage
  color: String
}

type PageBlocksFeaturesItemsIcon {
  color: String
  style: String
  name: String
}

type PageBlocksFeaturesItemsImage {
  src: String
  alt: String
}

type PageBlocksFeaturesItems {
  icon: PageBlocksFeaturesItemsIcon
  image: PageBlocksFeaturesItemsImage
  title: String
  text: String
}

type PageBlocksFeatures {
  sectionLabel: String
  id: String
  items: [PageBlocksFeaturesItems]
  color: String
}

type PageBlocksContent {
  sectionLabel: String
  id: String
  body: JSON
  color: String
}

type PageBlocksTwoColumnsContentFirstColumnImage {
  src: String
  alt: String
  hyperlink: String
}

type PageBlocksTwoColumnsContentFirstColumn {
  headline: String
  text: String
  image: PageBlocksTwoColumnsContentFirstColumnImage
}

type PageBlocksTwoColumnsContentSecondColumnImage {
  src: String
  alt: String
  hyperlink: String
}

type PageBlocksTwoColumnsContentSecondColumn {
  headline: String
  text: String
  image: PageBlocksTwoColumnsContentSecondColumnImage
}

type PageBlocksTwoColumnsContent {
  sectionLabel: String
  id: String
  headline: String
  firstColumn: PageBlocksTwoColumnsContentFirstColumn
  secondColumn: PageBlocksTwoColumnsContentSecondColumn
  color: String
}

type PageBlocksTestimonial {
  sectionLabel: String
  id: String
  quote: String
  author: String
  color: String
}

union PageBlocks = PageBlocksImageTextSection | PageBlocksHero | PageBlocksFeatures | PageBlocksContent | PageBlocksTwoColumnsContent | PageBlocksTestimonial

type PageMetaOgNamespace {
  value: String
  uri: String
}

type PageMetaOgCustomMeta {
  property: String
  content: String
}

type PageMetaOg {
  type: String
  image: String
  namespace: PageMetaOgNamespace
  customMeta: [PageMetaOgCustomMeta]
}

type PageMeta {
  description: String
  og: PageMetaOg
}

type Page implements Node & Document {
  title: String
  blocks: [PageBlocks]
  meta: PageMeta
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentMutation {
  post: PostMutation
  global: GlobalMutation
  author: AuthorMutation
  page: PageMutation
}

input PostMetaOgNamespaceMutation {
  value: String
  uri: String
}

input PostMetaOgCustomMetaMutation {
  property: String
  content: String
}

input PostMetaOgMutation {
  type: String
  image: String
  namespace: PostMetaOgNamespaceMutation
  customMeta: [PostMetaOgCustomMetaMutation]
}

input PostMetaMutation {
  description: String
  og: PostMetaOgMutation
}

input PostMutation {
  title: String
  heroImg: String
  excerpt: JSON
  author: String
  date: String
  section: String
  tags: [String]
  _body: JSON
  meta: PostMetaMutation
}

input GlobalHeadMetaMutation {
  description: String
}

input GlobalHeadMutation {
  title: String
  meta: GlobalHeadMetaMutation
}

input GlobalHeaderIconMutation {
  color: String
  style: String
  name: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  icon: GlobalHeaderIconMutation
  brand: String
  color: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSocialMutation {
  facebook: String
  twitter: String
  linkedin: String
  github: String
}

input GlobalFooterMutation {
  color: String
  social: GlobalFooterSocialMutation
  viewRawDataButton: Boolean
}

input GlobalThemeMutation {
  color: String
  font: String
  icon: String
  darkMode: String
}

input GlobalMutation {
  head: GlobalHeadMutation
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

input AuthorMutation {
  name: String
  avatar: String
}

input PageBlocksImageTextSectionImageMutation {
  src: String
  alt: String
}

input PageBlocksImageTextSectionMutation {
  sectionLabel: String
  id: String
  headline: String
  text: JSON
  image: PageBlocksImageTextSectionImageMutation
  color: String
}

input PageBlocksHeroActionsMutation {
  label: String
  type: String
  icon: Boolean
  link: String
}

input PageBlocksHeroImageMutation {
  src: String
  alt: String
}

input PageBlocksHeroMutation {
  sectionLabel: String
  id: String
  tagline: String
  headline: String
  text: JSON
  actions: [PageBlocksHeroActionsMutation]
  image: PageBlocksHeroImageMutation
  color: String
}

input PageBlocksFeaturesItemsIconMutation {
  color: String
  style: String
  name: String
}

input PageBlocksFeaturesItemsImageMutation {
  src: String
  alt: String
}

input PageBlocksFeaturesItemsMutation {
  icon: PageBlocksFeaturesItemsIconMutation
  image: PageBlocksFeaturesItemsImageMutation
  title: String
  text: String
}

input PageBlocksFeaturesMutation {
  sectionLabel: String
  id: String
  items: [PageBlocksFeaturesItemsMutation]
  color: String
}

input PageBlocksContentMutation {
  sectionLabel: String
  id: String
  body: JSON
  color: String
}

input PageBlocksTwoColumnsContentFirstColumnImageMutation {
  src: String
  alt: String
  hyperlink: String
}

input PageBlocksTwoColumnsContentFirstColumnMutation {
  headline: String
  text: String
  image: PageBlocksTwoColumnsContentFirstColumnImageMutation
}

input PageBlocksTwoColumnsContentSecondColumnImageMutation {
  src: String
  alt: String
  hyperlink: String
}

input PageBlocksTwoColumnsContentSecondColumnMutation {
  headline: String
  text: String
  image: PageBlocksTwoColumnsContentSecondColumnImageMutation
}

input PageBlocksTwoColumnsContentMutation {
  sectionLabel: String
  id: String
  headline: String
  firstColumn: PageBlocksTwoColumnsContentFirstColumnMutation
  secondColumn: PageBlocksTwoColumnsContentSecondColumnMutation
  color: String
}

input PageBlocksTestimonialMutation {
  sectionLabel: String
  id: String
  quote: String
  author: String
  color: String
}

input PageBlocksMutation {
  imageTextSection: PageBlocksImageTextSectionMutation
  hero: PageBlocksHeroMutation
  features: PageBlocksFeaturesMutation
  content: PageBlocksContentMutation
  twoColumnsContent: PageBlocksTwoColumnsContentMutation
  testimonial: PageBlocksTestimonialMutation
}

input PageMetaOgNamespaceMutation {
  value: String
  uri: String
}

input PageMetaOgCustomMetaMutation {
  property: String
  content: String
}

input PageMetaOgMutation {
  type: String
  image: String
  namespace: PageMetaOgNamespaceMutation
  customMeta: [PageMetaOgCustomMetaMutation]
}

input PageMetaMutation {
  description: String
  og: PageMetaOgMutation
}

input PageMutation {
  title: String
  blocks: [PageBlocksMutation]
  meta: PageMetaMutation
}

schema {
  query: Query
  mutation: Mutation
}
  